import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class _1_DHARMASonarFence_withStrings {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        while (true) {
            String input = br.readLine();
            if ("Reprogram".equals(input)){
                break;
            }
            int num = Integer.parseInt(input);

            for (int i = 0; i < 32 - 1; i++) {

                int firstDigit = (int) (num >> (31 - i) & 1);
                int secondDigit = (int) (num >> (31 - i - 1) & 1);

                if (firstDigit == secondDigit) {
                    int position = 31 - i;
                    num = num ^ 1 << (position);
                    num = num ^ 1 << (position - 1);

                    i += 1;
                }
            }
            //System.out.println(Integer.toUnsignedString(num));
            String bin=Integer.toBinaryString(num);
            System.out.println(Long.parseLong(bin,2));
        }
    }
}



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class _1b_DHARMASonarFence_withBits {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        while (true) {
            String input = br.readLine();
            if ("Reprogram".equals(input)){
                break;
            }
            int num = Integer.parseInt(input);

            for (int i = 0; i < 32 - 1; i++) {

                int firstDigit = (int) (num >> (31 - i) & 1);
                int secondDigit = (int) (num >> (31 - i - 1) & 1);

                if (firstDigit == secondDigit) {
                    int position = 31 - i;
                    num = num ^ 1 << (position);
                    num = num ^ 1 << (position - 1);

                    i += 1;
                }
            }
            //System.out.println(Integer.toUnsignedString(num));
            String bin=Integer.toBinaryString(num);
            System.out.println(Long.parseLong(bin,2));
        }
    }
}



import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class _2_DHARMASupplies {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String reg="\\[.*?]";
        Pattern patCrates=Pattern.compile(reg);

        List<String> allCrates=new ArrayList<String>();
        String input=scanner.nextLine();

        int lineNum=0;
        while ("Collect".equals(input)==false){
            lineNum++;
            Matcher matCrates=patCrates.matcher(input);
            while (matCrates.find()){
                allCrates.add(matCrates.group());
            }
            input=scanner.nextLine();
        }
        int n=allCrates.size()/lineNum;

        String secReg="\\[#(?<tag>(\\d{"+ n +"}|[a-z]{" + n + "}))(?<body>[A-Za-z0-9\\s]*)#\\1]";

        Pattern secPat=Pattern.compile(secReg);

        int validCreates=0;
        int foodCollected=0;
        int drikCollected=0;

        for (String crate : allCrates) {

            Matcher matSec=secPat.matcher(crate);
            if(matSec.find()){
                validCreates++;

                String tag=matSec.group("tag");
                String drink=matSec.group("body");

                if(Character.isDigit(tag.charAt(0))){

                    HashSet<Character> distinct=new HashSet<>();
                    for (char c : drink.toCharArray()) {
                        distinct.add(c);
                    }
                    int sum=0;
                    for (Character ch : distinct) {
                        sum+=ch;
                    }
                    foodCollected+=sum*n;
                }else{
                    int sum1=0;
                    for (char c : drink.toCharArray()) {
                        sum1+=c;
                    }
                    int sum2=0;
                    for (char c : tag.toCharArray()) {
                        sum2+=c;
                    }
                    drikCollected+=sum1*sum2;
                }
            }
        }

        if(validCreates==0){
            System.out.println("No supplies found!");
        }else{
            System.out.println("Number of supply crates: "+validCreates);

            System.out.println("Amount of food collected: "+foodCollected);

            System.out.println("Amount of drinks collected: "+drikCollected);
        }
    }
}



The DHARMA Initiative

import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.Scanner;

public class _3_DHARMAInitiative {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        LinkedHashMap<String,String> stationsPurposes=new LinkedHashMap<>();

        stationsPurposes.put("Hydra","Zoological Research.");
        stationsPurposes.put("Arrow","Development of defensive strategies, and Intelligence gathering.");
        stationsPurposes.put("Flame","Communication.");
        stationsPurposes.put("Pearl","Psychological Research and/or Observation.");
        stationsPurposes.put("Orchid","Space-time manipulation research, disguised as a Botanical station.");

        LinkedHashMap<String,LinkedHashMap<Integer,String>> faculties=new LinkedHashMap<>();

        faculties.put("Hydra", new LinkedHashMap<>());
        faculties.put("Arrow", new LinkedHashMap<>());
        faculties.put("Flame", new LinkedHashMap<>());
        faculties.put("Pearl", new LinkedHashMap<>());
        faculties.put("Orchid", new LinkedHashMap<>());

        String input=scanner.nextLine();

        while ("Recruit".equals(input)==false){
            String[] tokens=input.split("\\s*:\\s*");

            String name=tokens[0];
            int facNum=Integer.parseInt(tokens[1]);
            String station=tokens[2];

            if(stationsPurposes.containsKey(station)){

               if( faculties.get(station).containsKey(facNum)==false){
                   faculties.get(station).put(facNum,name);
               }
            }
            input=scanner.nextLine();
        }

        input=scanner.nextLine();

        if("DHARMA Initiative".equals(input)){
            faculties.entrySet().stream()
                    .sorted((x,y)->{
                        int xlen=x.getValue().size();
                        int ylen=y.getValue().size();
                        int res=compare(xlen,ylen); // or int res=Integer.compare(ylen,xlen);

                       if(res==0){
                           return x.getKey().compareTo(y.getKey());
                       }else {
                           return res;
                       }
                    })
                    .forEach(kv->{
                        System.out.printf("The %s has %d DHARMA recruits in it.%n",kv.getKey(),kv.getValue().size());
                    });
        }else{
            if(stationsPurposes.containsKey(input)){

                if(faculties.get(input).isEmpty()){
                    System.out.printf("The %s station: %s%n",input,stationsPurposes.get(input));
                    System.out.println("No recruits.");
                }else{
                    System.out.printf("The %s station: %s%n",input,stationsPurposes.get(input));
                    String station=input;
                    faculties.get(station).keySet()
                            .stream()
                            .sorted(Comparator.reverseOrder())
                            .forEach(x->{

                                System.out.printf("###%s - %d%n",faculties.get(station).get(x),x);
                            });
                }

            }else{
                System.out.println("DHARMA Initiative does not have such a station!");
            }
        }

    }
    public static int compare(Integer o1, Integer o2) {
        return o2.compareTo(o1);
    }
}


import java.util.*;
import java.util.stream.Collectors;

public class _4_TheSwanStation {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> number=Arrays
                .stream(scanner.nextLine().split("\\s+"))
                .map(Integer::parseInt)
                .collect(Collectors.toList());

        List<Integer> sec=Arrays
                .stream(scanner.nextLine().split("\\s+"))
                .map(Integer::parseInt)
                .collect(Collectors.toList());

        ArrayDeque<Integer> numbers=new ArrayDeque<>(number);
        ArrayDeque<Integer> seq=new ArrayDeque<>(sec);

        List<String> result=new ArrayList<>();

        while (result.size()<6){

            int curNum=seq.poll();
            if(curNum%numbers.peek()==0){
                result.add(""+curNum);
                numbers.poll();
            }else {
                seq.offer(curNum+1);
            }
        }
        System.out.println(String.join(", ",result));
    }
}
